package projectEuler.problems

/**
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
 * By starting with 1 and 2, the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million,
 * find the sum of the even-valued terms.
 *
 * @author Robert Giacinto
 */

object Problem2 {

  private def fibonacciList(max: Int): List[Int] = fibonacciList(max, List(2, 1))

  private def fibonacciList(max: Int, list: List[Int]): List[Int] = list.length match {
    case 1 => 2 :: list
    case _ => fibonacci(max, list)
  }

  private def fibonacci(max: Int, list: List[Int]): List[Int] = {
    val f = list.head + list.tail.head
    if (f < max) {
      fibonacci(max, f :: list)
    } else {
      list
    }
  }

  private def sumEven(list: List[Int]) = (0 /: (list filter (_ % 2 == 0)))(_ + _)

  private def giveEven(list: List[Int]) = list filter (_ % 2 == 0)


  def solve {
    println("=========================================================================================================")
    println("Problem 2: \n" +
      "Each new term in the Fibonacci sequence is generated by adding the previous two terms. " +
      "By starting with 1 and 2, the first 10 terms will be:\n " +
      "1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\n " +
      "By considering the terms in the Fibonacci sequence whose values do not exceed four million, " +
      "find the sum of the even-valued terms.\n")
    print("Solution: ")
    val fiboList = fibonacciList(4000000)
    println(giveEven(fiboList))
    println(sumEven(fiboList))
    println("=========================================================================================================")
  }

}
